name: CI / CD
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        python-version: ["3.7", "3.9", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --user pipenv
          pipenv --python ${{ matrix.python-version }}
          pipenv install pytest
          pipenv install
      - name: Turn on 'editable' mode
        run: |
          pipenv install -e .
      - name: Test with pytest
        run: |
          pipenv run python -m pytest
  deliver:
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --user pipenv
          pipenv install pytest
          pipenv install
      - name: Test with pytest
        run: |
          pipenv run python -m pytest
      - name: Build package
        run: |
          pipenv install build
          pipenv run python -m build .
      - name: Check PyPI for existing version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          if twine check $VERSION --repository-url https://test.pypi.org/legacy/; then
            echo "Version $VERSION already exists on test PyPI. Exiting."
            exit 1
          else
            echo "Version $VERSION does not exist on test PyPI. Proceeding with build and publish."
          fi
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
